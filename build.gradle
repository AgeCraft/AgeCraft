plugins {
	id "java"
	id "maven"
	id "net.minecraftforge.gradle.forge" version "2.0.2"
}

repositories {
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven"
	}
	maven {
		name = "ilexiconn"
		url = "http://maven.ilexiconn.net/"
	}
	maven {
		name = "agecraft"
		url = "http://maven.agecraft.org/"
	}
}

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    compile "codechicken:CodeChickenLib:${config.minecraft_version}-${config.ccl_version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft_version}-${config.ccc_version}:dev"
    compile "net.ilexiconn:llibrary:${config.llibrary_version}-${config.minecraft_version}:dev"
    compile "org.agecraft.extendedmetadata:ExtendedMetadata:${config.minecraft_version}-${config.em_version}:dev"
}

version = config.mod_version
group = config.mod_group
archivesBaseName = config.mod_name

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "minecraft"

    replace "@VERSION@", "${config.mod_version}.${System.getenv("CIRCLE_BUILD_NUM") ?: (System.getenv("BUILD_NUMBER") ?: 0)}"
    replace "@MC_VERSION@", config.minecraft_version

    mappings = config.minecraft_mappings
}

version = "${config.minecraft_version}-${config.mod_version}.${System.getenv("CIRCLE_BUILD_NUM") ?: (System.getenv("BUILD_NUMBER") ?: 0)}"

processResources {
    inputs.property "version", project.version
    inputs.property "mc_version", project.config.minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mc_version':project.config.minecraft_version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// task sourceJar(type: Jar) {
//     from sourceSets.main.allSource
//     classifier = 'sources'
// }

// task javadocJar(type: Jar, dependsOn: javadoc) {
//     from javadoc.destinationDir
//     classifier = 'javadoc'
// }

// task deobfJar(type: Jar) {
//     from sourceSets.main.output
//     classifier = 'dev'
// }

// build.dependsOn sourceJar, javadocJar, deobfJar

// artifacts {
//     archives sourceJar
//     archives javadocJar
//     archives deobfJar
// }

